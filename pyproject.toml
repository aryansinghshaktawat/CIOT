[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ciot-toolkit"
version = "3.0.0"
description = "Professional Open Source Intelligence & Digital Forensics Platform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "CIOT Development Team", email = "dev@ciot-toolkit.org"}
]
maintainers = [
    {name = "CIOT Development Team", email = "dev@ciot-toolkit.org"}
]
keywords = [
    "osint",
    "investigation", 
    "forensics",
    "cybersecurity",
    "intelligence",
    "digital-forensics",
    "open-source-intelligence",
    "security-tools",
    "investigation-tools"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Legal Industry", 
    "Intended Audience :: Science/Research",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: X11 Applications",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X"
]
requires-python = ">=3.8"
dependencies = [
    "customtkinter>=5.2.0",
    "requests>=2.31.0",
    "urllib3>=1.26.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "Pillow>=10.0.0",
    "fpdf2>=2.7.0",
    "python-whois>=0.8.0",
    "shodan>=1.30.0",
    "python-nmap>=0.7.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.4.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/ciot-toolkit"
Documentation = "https://github.com/yourusername/ciot-toolkit/docs"
Repository = "https://github.com/yourusername/ciot-toolkit"
"Bug Tracker" = "https://github.com/yourusername/ciot-toolkit/issues"
Changelog = "https://github.com/yourusername/ciot-toolkit/blob/main/CHANGELOG.md"

[project.scripts]
ciot = "src.core.application:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.png", "*.ico", "*.json", "*.md"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "ci: marks tests as CI configuration tests",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "ui: marks tests as UI tests",
    "slow: marks tests as slow running"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]