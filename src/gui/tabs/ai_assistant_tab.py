import customtkinter as ctk
import threading
import urllib.parse

class AIAssistantTab(ctk.CTkFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, **kwargs)
        self.setup_ui()

    def show_info_popup(self):
        """Show information about AI Assistant"""
        info_window = ctk.CTkToplevel(self)
        info_window.title("AI Assistant - Information")
        info_window.geometry("600x400")
        info_window.transient(self.master)
        info_window.grab_set()
        
        content = ctk.CTkTextbox(info_window, wrap="word")
        content.pack(fill="both", expand=True, padx=20, pady=20)
        
        info_text = """ü§ñ AI ASSISTANT TAB

WHAT IT DOES:
Your intelligent OSINT investigation assistant that provides methodology guidance, tool recommendations, and analysis help.

AVAILABLE SERVICES:
‚Ä¢ Free AI Chat - Get basic AI responses for OSINT questions
‚Ä¢ Offline Analysis - Local keyword and pattern analysis
‚Ä¢ Web Search - Search-based intelligent answers

HOW TO USE:
1. Select your preferred AI service from the dropdown
2. Type your OSINT-related question in the text box
3. Click 'Ask AI' to get intelligent guidance
4. Use 'Clear' to reset for new questions

EXAMPLE QUESTIONS:
‚Ä¢ "How do I investigate a suspicious email address?"
‚Ä¢ "What OSINT techniques work best for social media analysis?"
‚Ä¢ "How can I trace cryptocurrency transactions?"
‚Ä¢ "What are the best practices for IP address investigation?"
‚Ä¢ "How do I verify information found during OSINT research?"

CYBER INVESTIGATION APPLICATIONS:
‚Ä¢ Investigation methodology planning
‚Ä¢ Tool selection guidance
‚Ä¢ Best practices consultation
‚Ä¢ Research strategy development
‚Ä¢ Training and education support
‚Ä¢ Case analysis assistance

FEATURES:
‚Ä¢ Rule-based responses for common OSINT scenarios
‚Ä¢ Keyword analysis and pattern recognition
‚Ä¢ Investigation workflow suggestions
‚Ä¢ Legal and ethical guidance reminders

NOTE:
This assistant provides guidance based on established OSINT methodologies and best practices. Always verify information through multiple sources and ensure compliance with legal requirements."""

        content.insert("1.0", info_text)
        content.configure(state="disabled")

    def setup_ui(self):
        # Title
        title_label = ctk.CTkLabel(self, text="ü§ñ OSINT Investigation Assistant", 
                                 font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)

        # AI Service selection
        service_frame = ctk.CTkFrame(self)
        service_frame.pack(fill="x", padx=20, pady=10)

        ctk.CTkLabel(service_frame, text="AI Service:", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(side="left", padx=10)
        
        self.ai_service = ctk.StringVar(value="Free AI Chat")
        ai_menu = ctk.CTkOptionMenu(service_frame, variable=self.ai_service,
                                   values=["Free AI Chat", "Offline Analysis", "Web Search"],
                                   font=ctk.CTkFont(size=12))
        ai_menu.pack(side="left", padx=10)

        # Input frame
        input_frame = ctk.CTkFrame(self)
        input_frame.pack(fill="x", padx=20, pady=10)

        ctk.CTkLabel(input_frame, text="Ask your OSINT question:", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=5)

        self.question_text = ctk.CTkTextbox(input_frame, height=100, 
                                           font=ctk.CTkFont(size=12))
        self.question_text.pack(fill="x", padx=10, pady=5)
        self.question_text.insert("1.0", "Example: How do I investigate a suspicious email address?")

        # Buttons
        button_frame = ctk.CTkFrame(input_frame)
        button_frame.pack(pady=10)

        ctk.CTkButton(button_frame, text="ü§ñ Ask AI", command=self.ask_ai,
                     font=ctk.CTkFont(size=12, weight="bold")).pack(side="left", padx=10)
        ctk.CTkButton(button_frame, text="üóëÔ∏è Clear", command=self.clear_all,
                     font=ctk.CTkFont(size=12)).pack(side="left", padx=10)

        # Standardized results section - consistent with Surface Web OSINT
        results_frame = ctk.CTkFrame(self, corner_radius=12)
        results_frame.pack(fill="both", expand=True, padx=20, pady=(10, 20))
        
        # Compact results header
        results_header = ctk.CTkFrame(results_frame, fg_color="transparent")
        results_header.pack(fill="x", padx=12, pady=(12, 8))
        
        results_icon = ctk.CTkLabel(results_header, text="üìä", font=ctk.CTkFont(size=16))
        results_icon.pack(side="left")
        
        results_title = ctk.CTkLabel(
            results_header, 
            text="AI Assistant Response", 
            font=ctk.CTkFont(size=16, weight="bold")
        )
        results_title.pack(side="left", padx=(8, 0))
        
        # Status indicator
        self.status_label = ctk.CTkLabel(
            results_header,
            text="Ready",
            font=ctk.CTkFont(size=11),
            text_color=("#4a9eff", "#4a9eff")
        )
        self.status_label.pack(side="right")
        
        # Standardized results textbox - consistent dimensions
        self.results_textbox = ctk.CTkTextbox(
            results_frame, 
            font=ctk.CTkFont(size=11),
            corner_radius=8,
            border_width=1,
            wrap="word"
        )
        self.results_textbox.pack(fill="both", expand=True, padx=8, pady=(0, 8))
        
        # Initial welcome message
        welcome_msg = """ü§ñ OSINT Investigation Assistant Ready!

Available Services:
‚Ä¢ Free AI Chat - Basic AI responses for OSINT guidance
‚Ä¢ Offline Analysis - Local analysis and keyword extraction  
‚Ä¢ Web Search - Search-based intelligent answers

I can help you with:
‚úì Investigation methodology planning
‚úì Tool selection and recommendations
‚úì Best practices and legal considerations
‚úì Research strategy development
‚úì Case analysis guidance

Ask me anything about OSINT techniques, tools, or methodologies!

Example questions:
‚Ä¢ "What's the best approach to investigate a phone number?"
‚Ä¢ "How do I safely research dark web activities?"
‚Ä¢ "What tools should I use for social media investigation?"
"""
        self.results_textbox.insert("end", welcome_msg)

    def ask_ai(self):
        question = self.question_text.get("1.0", "end").strip()
        service = self.ai_service.get()
        
        if not question or question == "Example: How do I investigate a suspicious email address?":
            self.results_textbox.insert("end", "\n‚ùå Please enter a specific question about OSINT techniques.\n")
            return

        self.results_textbox.insert("end", f"\n{'='*60}\n")
        self.results_textbox.insert("end", f"ü§î Your Question: {question}\n")
        self.results_textbox.insert("end", f"ü§ñ Service: {service}\n")
        self.results_textbox.insert("end", f"{'='*60}\n\n")

        if service == "Free AI Chat":
            threading.Thread(target=self.free_ai_response, args=(question,)).start()
        elif service == "Offline Analysis":
            self.offline_analysis(question)
        elif service == "Web Search":
            self.web_search_response(question)

    def free_ai_response(self, question):
        self.results_textbox.insert("end", "üîÑ Generating AI response...\n\n")
        
        try:
            response = self.generate_osint_response(question)
            self.results_textbox.insert("end", f"üí¨ AI Response:\n{response}\n")
        except Exception as e:
            self.results_textbox.insert("end", f"‚ùå Error: {str(e)}\n")
            self.offline_analysis(question)

    def generate_osint_response(self, question):
        """Generate intelligent OSINT responses based on keywords"""
        question_lower = question.lower()
        
        # Email investigation
        if any(word in question_lower for word in ["email", "e-mail", "mail"]):
            return """üìß EMAIL INVESTIGATION METHODOLOGY:

1. VALIDATION & VERIFICATION:
   ‚Ä¢ Use email validation services (Hunter.io, NeverBounce)
   ‚Ä¢ Check if email exists without sending mail
   ‚Ä¢ Verify domain legitimacy and MX records

2. BREACH & COMPROMISE CHECK:
   ‚Ä¢ Have I Been Pwned - check for known breaches
   ‚Ä¢ Dehashed - search leaked databases
   ‚Ä¢ h8mail tool for automated breach hunting

3. GOOGLE DORKING:
   ‚Ä¢ site:pastebin.com "email@domain.com"
   ‚Ä¢ "email@domain.com" filetype:pdf
   ‚Ä¢ site:linkedin.com "email@domain.com"

4. SOCIAL MEDIA INVESTIGATION:
   ‚Ä¢ Search email on major platforms
   ‚Ä¢ Check for associated usernames
   ‚Ä¢ Look for profile pictures and personal info

5. ASSOCIATED ACCOUNTS:
   ‚Ä¢ Use email to recover accounts (carefully)
   ‚Ä¢ Check registration patterns
   ‚Ä¢ Look for connected social profiles

LEGAL NOTE: Ensure you have authorization before investigating others' emails."""

        # Phone investigation
        elif any(word in question_lower for word in ["phone", "number", "mobile", "cell"]):
            return """üìû PHONE NUMBER INVESTIGATION METHODOLOGY:

1. VALIDATION:
   ‚Ä¢ NumVerify API for carrier/location info
   ‚Ä¢ TrueCaller for registered name/details
   ‚Ä¢ Carrier lookup services

2. REVERSE LOOKUP:
   ‚Ä¢ WhitePages reverse phone lookup
   ‚Ä¢ Sync.me social media connections
   ‚Ä¢ FastPeopleSearch for associated records

3. OSINT TECHNIQUES:
   ‚Ä¢ Google search with quotes "phone number"
   ‚Ä¢ Social media platform searches
   ‚Ä¢ Business directory searches

4. TECHNICAL ANALYSIS:
   ‚Ä¢ Check for VoIP vs landline vs mobile
   ‚Ä¢ Identify carrier and region
   ‚Ä¢ Port history if available

5. SOCIAL ENGINEERING AWARENESS:
   ‚Ä¢ Never call unknown numbers directly
   ‚Ä¢ Be aware of callback scams
   ‚Ä¢ Document all findings properly

LEGAL NOTE: Phone investigation must comply with local privacy laws."""

        # IP investigation  
        elif any(word in question_lower for word in ["ip", "address", "network"]):
            return """üåê IP ADDRESS INVESTIGATION METHODOLOGY:

1. GEOLOCATION:
   ‚Ä¢ ip-api.com for basic geo data
   ‚Ä¢ MaxMind GeoIP databases
   ‚Ä¢ IPinfo.io for detailed analysis

2. OWNERSHIP & ISP:
   ‚Ä¢ WHOIS lookup for registration data
   ‚Ä¢ ARIN/RIPE database searches
   ‚Ä¢ AS (Autonomous System) information

3. THREAT INTELLIGENCE:
   ‚Ä¢ VirusTotal for malware associations
   ‚Ä¢ AbuseIPDB for abuse reports
   ‚Ä¢ Shodan for open ports/services

4. HISTORICAL DATA:
   ‚Ä¢ PassiveTotal for DNS history
   ‚Ä¢ SecurityTrails for domain associations
   ‚Ä¢ Archive.org for website history

5. NETWORK ANALYSIS:
   ‚Ä¢ Traceroute for routing path
   ‚Ä¢ Port scanning (only if authorized)
   ‚Ä¢ Banner grabbing for service info

LEGAL NOTE: Only scan IPs you own or have explicit permission to test."""

        # Social media investigation
        elif any(word in question_lower for word in ["social", "media", "facebook", "twitter", "instagram"]):
            return """üì± SOCIAL MEDIA INVESTIGATION METHODOLOGY:

1. USERNAME ENUMERATION:
   ‚Ä¢ Sherlock tool for cross-platform search
   ‚Ä¢ NameChk for availability checking
   ‚Ä¢ Manual searches across platforms

2. PROFILE ANALYSIS:
   ‚Ä¢ Profile pictures reverse image search
   ‚Ä¢ Bio information extraction
   ‚Ä¢ Connection/friend list analysis

3. CONTENT ANALYSIS:
   ‚Ä¢ Timeline analysis for patterns
   ‚Ä¢ Geolocation from posts/photos
   ‚Ä¢ Language and behavior patterns

4. METADATA EXTRACTION:
   ‚Ä¢ EXIF data from uploaded photos
   ‚Ä¢ Timestamp analysis
   ‚Ä¢ Device/app information

5. RELATIONSHIP MAPPING:
   ‚Ä¢ Identify close connections
   ‚Ä¢ Mutual friends/followers
   ‚Ä¢ Group memberships

PRIVACY CONSIDERATIONS:
‚Ä¢ Respect privacy settings and boundaries
‚Ä¢ Only collect publicly available information
‚Ä¢ Be aware of terms of service violations"""

        # Cryptocurrency investigation
        elif any(word in question_lower for word in ["bitcoin", "crypto", "blockchain", "wallet"]):
            return """‚Çø CRYPTOCURRENCY INVESTIGATION METHODOLOGY:

1. BLOCKCHAIN ANALYSIS:
   ‚Ä¢ Block explorers (Blockchain.info, Blockchair)
   ‚Ä¢ Transaction history tracing
   ‚Ä¢ Address clustering analysis

2. ATTRIBUTION TECHNIQUES:
   ‚Ä¢ Exchange identification
   ‚Ä¢ Wallet fingerprinting
   ‚Ä¢ Behavior pattern analysis

3. OSINT TOOLS:
   ‚Ä¢ Crystal Blockchain for visualization
   ‚Ä¢ Chainalysis for professional analysis
   ‚Ä¢ OXT.me for Bitcoin investigation

4. DATA COLLECTION:
   ‚Ä¢ Transaction amounts and timing
   ‚Ä¢ Address reuse patterns
   ‚Ä¢ Mixing service detection

5. REPORTING:
   ‚Ä¢ Document transaction flows
   ‚Ä¢ Create visual maps
   ‚Ä¢ Maintain chain of custody

COMPLIANCE NOTE: Cryptocurrency investigation often requires specialized training and legal authorization."""

        # General OSINT methodology
        elif any(word in question_lower for word in ["osint", "investigation", "research"]):
            return """üîç GENERAL OSINT METHODOLOGY:

1. PLANNING PHASE:
   ‚Ä¢ Define investigation objectives
   ‚Ä¢ Identify target parameters
   ‚Ä¢ Choose appropriate tools

2. COLLECTION PHASE:
   ‚Ä¢ Passive information gathering
   ‚Ä¢ Multiple source verification
   ‚Ä¢ Document all findings

3. PROCESSING PHASE:
   ‚Ä¢ Data correlation and analysis
   ‚Ä¢ Timeline construction
   ‚Ä¢ Pattern identification

4. ANALYSIS PHASE:
   ‚Ä¢ Verify information accuracy
   ‚Ä¢ Identify gaps and inconsistencies
   ‚Ä¢ Draw evidence-based conclusions

5. REPORTING PHASE:
   ‚Ä¢ Document methodology used
   ‚Ä¢ Present findings clearly
   ‚Ä¢ Maintain evidence integrity

BEST PRACTICES:
‚Ä¢ Always use multiple sources for verification
‚Ä¢ Maintain detailed investigation logs
‚Ä¢ Respect privacy and legal boundaries
‚Ä¢ Stay within authorized scope"""

        # Dark web investigation
        elif any(word in question_lower for word in ["dark", "web", "tor", "onion"]):
            return """üï∏Ô∏è DARK WEB INVESTIGATION METHODOLOGY:

1. SAFETY PREPARATION:
   ‚Ä¢ Use secure, isolated environment
   ‚Ä¢ VPN + Tor for anonymity layers
   ‚Ä¢ Never download unknown files

2. ACCESS METHODS:
   ‚Ä¢ Tor browser properly configured
   ‚Ä¢ Tails OS for maximum security
   ‚Ä¢ Never use real identity/accounts

3. INVESTIGATION TECHNIQUES:
   ‚Ä¢ Directory searches (DuckDuckGo onion)
   ‚Ä¢ Known marketplace monitoring
   ‚Ä¢ Forum and community analysis

4. DATA COLLECTION:
   ‚Ä¢ Screenshot everything (no downloads)
   ‚Ä¢ Document timestamps and URLs
   ‚Ä¢ Note vendor/user information

5. ANALYSIS:
   ‚Ä¢ Cross-reference with surface web
   ‚Ä¢ Track cryptocurrency transactions
   ‚Ä¢ Monitor for data breaches

CRITICAL WARNINGS:
‚Ä¢ Only for legitimate security/law enforcement purposes
‚Ä¢ Many activities are illegal to access or participate in
‚Ä¢ Requires proper legal authorization
‚Ä¢ Extreme security precautions necessary"""

        # Default response
        else:
            return f"""ü§ñ OSINT GUIDANCE FOR YOUR QUESTION:

Your question: "{question}"

GENERAL APPROACH:
1. Break down your investigation into specific components
2. Start with passive information gathering
3. Use multiple sources for verification
4. Document your methodology and findings

RECOMMENDED FIRST STEPS:
‚Ä¢ Clearly define what you're investigating
‚Ä¢ Identify the type of information you need
‚Ä¢ Choose appropriate tools and techniques
‚Ä¢ Ensure you have proper authorization

COMMON OSINT CATEGORIES:
‚Ä¢ People investigation (social media, public records)
‚Ä¢ Technical investigation (IP, domains, infrastructure)
‚Ä¢ Digital forensics (images, documents, metadata)
‚Ä¢ Financial investigation (cryptocurrency, transactions)

Would you like me to provide specific guidance for any of these areas?

IMPORTANT REMINDERS:
‚Ä¢ Only investigate what you're authorized to research
‚Ä¢ Respect privacy laws and platform terms of service
‚Ä¢ Verify information through multiple independent sources
‚Ä¢ Maintain detailed documentation of your process"""

    def offline_analysis(self, question):
        self.results_textbox.insert("end", "üîç Performing offline analysis...\n\n")
        
        # Keyword analysis
        osint_keywords = {
            "investigation": ["methodology", "planning", "documentation"],
            "social": ["media", "profiles", "usernames", "connections"],
            "email": ["validation", "breaches", "dorking", "verification"],
            "phone": ["lookup", "carrier", "validation", "reverse search"],
            "ip": ["geolocation", "whois", "threat intelligence", "scanning"],
            "crypto": ["blockchain", "transactions", "wallets", "attribution"],
            "dark web": ["tor", "anonymity", "safety", "monitoring"],
            "osint": ["sources", "verification", "tools", "techniques"]
        }
        
        question_lower = question.lower()
        found_topics = []
        
        for topic, related_words in osint_keywords.items():
            if topic in question_lower or any(word in question_lower for word in related_words):
                found_topics.append(topic)
        
        self.results_textbox.insert("end", f"üìä Offline Analysis Results:\n")
        self.results_textbox.insert("end", f"‚Ä¢ Question length: {len(question)} characters\n")
        self.results_textbox.insert("end", f"‚Ä¢ Word count: {len(question.split())} words\n")
        self.results_textbox.insert("end", f"‚Ä¢ Detected OSINT topics: {', '.join(found_topics) if found_topics else 'General inquiry'}\n\n")
        
        if found_topics:
            self.results_textbox.insert("end", f"üí° Recommended investigation approaches:\n")
            for topic in found_topics:
                if topic == "email":
                    self.results_textbox.insert("end", "‚Ä¢ Email investigation: validation, breach checking, OSINT searches\n")
                elif topic == "social":
                    self.results_textbox.insert("end", "‚Ä¢ Social media investigation: profile analysis, username enumeration\n")
                elif topic == "ip":
                    self.results_textbox.insert("end", "‚Ä¢ IP investigation: geolocation, threat intelligence, network analysis\n")
                elif topic == "crypto":
                    self.results_textbox.insert("end", "‚Ä¢ Cryptocurrency investigation: blockchain analysis, transaction tracing\n")

    def web_search_response(self, question):
        self.results_textbox.insert("end", "üîç Generating web search guidance...\n\n")
        
        search_query = urllib.parse.quote(f"{question} OSINT methodology guide")
        search_url = f"https://www.google.com/search?q={search_query}"
        
        self.results_textbox.insert("end", f"üåê Recommended Web Searches:\n")
        self.results_textbox.insert("end", f"Primary Query: {question} OSINT methodology\n")
        self.results_textbox.insert("end", f"Search URL: {search_url}\n\n")
        
        self.results_textbox.insert("end", "üí° Additional search suggestions:\n")
        suggestions = [
            f'"{question}" investigation guide',
            f'"{question}" OSINT techniques',
            f'"{question}" cyber investigation',
            f'"{question}" digital forensics',
            f'"{question}" security research'
        ]
        
        for suggestion in suggestions:
            self.results_textbox.insert("end", f"‚Ä¢ {suggestion}\n")
        
        self.results_textbox.insert("end", f"\nüîó Recommended Resources:\n")
        self.results_textbox.insert("end", "‚Ä¢ OSINT Framework (osintframework.com)\n")
        self.results_textbox.insert("end", "‚Ä¢ Bellingcat's Online Investigation Toolkit\n")
        self.results_textbox.insert("end", "‚Ä¢ SANS Digital Forensics resources\n")

    def clear_all(self):
        self.question_text.delete("1.0", "end")
        self.question_text.insert("1.0", "Example: How do I investigate a suspicious email address?")
        self.results_textbox.delete("1.0", "end")
        
        welcome_msg = """ü§ñ Chat cleared! Ask me anything about OSINT techniques.

I'm ready to help with:
‚Ä¢ Investigation methodology
‚Ä¢ Tool recommendations  
‚Ä¢ Best practices guidance
‚Ä¢ Legal and ethical considerations
"""
        self.results_textbox.insert("end", welcome_msg)

